// Package adminhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package adminhttp

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/frenswifbenefits/myfren/internal/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/admin/customer/list)
	GetV1AdminCustomerList(c *gin.Context)

	// (GET /v1/admin/docs)
	GetV1AdminDocs(c *gin.Context)

	// (DELETE /v1/admin/fren)
	DeleteV1AdminFren(c *gin.Context)

	// (POST /v1/admin/fren)
	PostV1AdminFren(c *gin.Context)

	// (PUT /v1/admin/fren)
	PutV1AdminFren(c *gin.Context)

	// (GET /v1/admin/fren/list)
	GetV1AdminFrenList(c *gin.Context)

	// (POST /v1/admin/generate_invite_token)
	PostV1AdminGenerateInviteToken(c *gin.Context)

	// (POST /v1/admin/login)
	PostV1AdminLogin(c *gin.Context)

	// (DELETE /v1/admin/portfolio)
	DeleteV1AdminPortfolio(c *gin.Context)

	// (POST /v1/admin/portfolio)
	PostV1AdminPortfolio(c *gin.Context)

	// (PUT /v1/admin/portfolio)
	PutV1AdminPortfolio(c *gin.Context)

	// (GET /v1/admin/portfolio/list)
	GetV1AdminPortfolioList(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1AdminCustomerList operation middleware
func (siw *ServerInterfaceWrapper) GetV1AdminCustomerList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1AdminCustomerList(c)
}

// GetV1AdminDocs operation middleware
func (siw *ServerInterfaceWrapper) GetV1AdminDocs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1AdminDocs(c)
}

// DeleteV1AdminFren operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1AdminFren(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteV1AdminFren(c)
}

// PostV1AdminFren operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminFren(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminFren(c)
}

// PutV1AdminFren operation middleware
func (siw *ServerInterfaceWrapper) PutV1AdminFren(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutV1AdminFren(c)
}

// GetV1AdminFrenList operation middleware
func (siw *ServerInterfaceWrapper) GetV1AdminFrenList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1AdminFrenList(c)
}

// PostV1AdminGenerateInviteToken operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminGenerateInviteToken(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminGenerateInviteToken(c)
}

// PostV1AdminLogin operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminLogin(c)
}

// DeleteV1AdminPortfolio operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1AdminPortfolio(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteV1AdminPortfolio(c)
}

// PostV1AdminPortfolio operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminPortfolio(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminPortfolio(c)
}

// PutV1AdminPortfolio operation middleware
func (siw *ServerInterfaceWrapper) PutV1AdminPortfolio(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutV1AdminPortfolio(c)
}

// GetV1AdminPortfolioList operation middleware
func (siw *ServerInterfaceWrapper) GetV1AdminPortfolioList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1AdminPortfolioList(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/admin/customer/list", wrapper.GetV1AdminCustomerList)
	router.GET(options.BaseURL+"/v1/admin/docs", wrapper.GetV1AdminDocs)
	router.DELETE(options.BaseURL+"/v1/admin/fren", wrapper.DeleteV1AdminFren)
	router.POST(options.BaseURL+"/v1/admin/fren", wrapper.PostV1AdminFren)
	router.PUT(options.BaseURL+"/v1/admin/fren", wrapper.PutV1AdminFren)
	router.GET(options.BaseURL+"/v1/admin/fren/list", wrapper.GetV1AdminFrenList)
	router.POST(options.BaseURL+"/v1/admin/generate_invite_token", wrapper.PostV1AdminGenerateInviteToken)
	router.POST(options.BaseURL+"/v1/admin/login", wrapper.PostV1AdminLogin)
	router.DELETE(options.BaseURL+"/v1/admin/portfolio", wrapper.DeleteV1AdminPortfolio)
	router.POST(options.BaseURL+"/v1/admin/portfolio", wrapper.PostV1AdminPortfolio)
	router.PUT(options.BaseURL+"/v1/admin/portfolio", wrapper.PutV1AdminPortfolio)
	router.GET(options.BaseURL+"/v1/admin/portfolio/list", wrapper.GetV1AdminPortfolioList)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
