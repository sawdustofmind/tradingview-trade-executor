// Package userhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package userhttp

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/frenswifbenefits/myfren/internal/openapi"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/user/actions/list)
	GetV1UserActionsList(c *gin.Context)

	// (GET /v1/user/docs)
	GetV1UserDocs(c *gin.Context)

	// (GET /v1/user/fren/list)
	GetV1UserFrenList(c *gin.Context)

	// (POST /v1/user/login)
	PostV1UserLogin(c *gin.Context)

	// (GET /v1/user/portfolio/list)
	GetV1UserPortfolioList(c *gin.Context)

	// (POST /v1/user/portfolio/subscribe)
	PostV1UserPortfolioSubscribe(c *gin.Context)

	// (GET /v1/user/portfolio/subscriptions/list)
	GetV1UserPortfolioSubscriptionsList(c *gin.Context)

	// (POST /v1/user/portfolio/unsubscribe)
	PostV1UserPortfolioUnsubscribe(c *gin.Context)

	// (POST /v1/user/register)
	PostV1UserRegister(c *gin.Context)

	// (GET /v1/user/settings)
	GetV1UserSettings(c *gin.Context)

	// (PUT /v1/user/settings)
	PutV1UserSettings(c *gin.Context)

	// (GET /v1/user/trades/list)
	GetV1UserTradesList(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1UserActionsList operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserActionsList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserActionsList(c)
}

// GetV1UserDocs operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserDocs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserDocs(c)
}

// GetV1UserFrenList operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserFrenList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserFrenList(c)
}

// PostV1UserLogin operation middleware
func (siw *ServerInterfaceWrapper) PostV1UserLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1UserLogin(c)
}

// GetV1UserPortfolioList operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserPortfolioList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserPortfolioList(c)
}

// PostV1UserPortfolioSubscribe operation middleware
func (siw *ServerInterfaceWrapper) PostV1UserPortfolioSubscribe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1UserPortfolioSubscribe(c)
}

// GetV1UserPortfolioSubscriptionsList operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserPortfolioSubscriptionsList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserPortfolioSubscriptionsList(c)
}

// PostV1UserPortfolioUnsubscribe operation middleware
func (siw *ServerInterfaceWrapper) PostV1UserPortfolioUnsubscribe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1UserPortfolioUnsubscribe(c)
}

// PostV1UserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostV1UserRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1UserRegister(c)
}

// GetV1UserSettings operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserSettings(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserSettings(c)
}

// PutV1UserSettings operation middleware
func (siw *ServerInterfaceWrapper) PutV1UserSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutV1UserSettings(c)
}

// GetV1UserTradesList operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserTradesList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserTradesList(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/user/actions/list", wrapper.GetV1UserActionsList)
	router.GET(options.BaseURL+"/v1/user/docs", wrapper.GetV1UserDocs)
	router.GET(options.BaseURL+"/v1/user/fren/list", wrapper.GetV1UserFrenList)
	router.POST(options.BaseURL+"/v1/user/login", wrapper.PostV1UserLogin)
	router.GET(options.BaseURL+"/v1/user/portfolio/list", wrapper.GetV1UserPortfolioList)
	router.POST(options.BaseURL+"/v1/user/portfolio/subscribe", wrapper.PostV1UserPortfolioSubscribe)
	router.GET(options.BaseURL+"/v1/user/portfolio/subscriptions/list", wrapper.GetV1UserPortfolioSubscriptionsList)
	router.POST(options.BaseURL+"/v1/user/portfolio/unsubscribe", wrapper.PostV1UserPortfolioUnsubscribe)
	router.POST(options.BaseURL+"/v1/user/register", wrapper.PostV1UserRegister)
	router.GET(options.BaseURL+"/v1/user/settings", wrapper.GetV1UserSettings)
	router.PUT(options.BaseURL+"/v1/user/settings", wrapper.PutV1UserSettings)
	router.GET(options.BaseURL+"/v1/user/trades/list", wrapper.GetV1UserTradesList)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
